b'<!DOCTYPE html>\n<html>\n  <head prefix="og: https://ogp.me/ns#">\n    <meta charset="utf-8">\n    <title>The Open Graph protocol</title>\n    <meta name="description" content="The Open Graph protocol enables any web page to become a rich object in a social graph.">\n    <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>\n    <link rel="stylesheet" href="base.css" type="text/css">\n    <meta property="og:title" content="Open Graph protocol">\n    <meta property="og:type" content="website">\n    <meta property="og:url" content="https://ogp.me/">\n    <meta property="og:image" content="https://ogp.me/logo.png">\n    <meta property="og:image:type" content="image/png">\n    <meta property="og:image:width" content="300">\n    <meta property="og:image:height" content="300">\n    <meta property="og:image:alt" content="The Open Graph logo">\n    <meta property="og:description" content="The Open Graph protocol enables any web page to become a rich object in a social graph.">\n    <meta prefix="fb: https://ogp.me/ns/fb#" property="fb:app_id" content="115190258555800">\n    <link rel="alternate" type="application/rdf+xml" href="https://ogp.me/ns/ogp.me.rdf">\n    <link rel="alternate" type="text/turtle" href="https://ogp.me/ns/ogp.me.ttl">\n  </head>\n  <body>\n    <div id="body">\n    <div id="header">\n      <h1>The Open Graph protocol</h1>\n      <img alt="Open Graph protocol logo" src="https://ogp.me/logo.png" width="300" height="300">\n    </div>\n    <div id="content">\n<h2 id="aidintrohrefintrointroductiona"><a id="intro" href="#intro">Introduction</a></h2>\n<p>The <a href="https://ogp.me/">Open Graph protocol</a> enables any web page to become a\nrich object in a social graph. For instance, this is used on Facebook to allow\nany web page to have the same functionality as any other object on Facebook.</p>\n<p>While many different technologies and schemas exist and could be combined\ntogether, there isn\'t a single technology which provides enough information to\nrichly represent any web page within the social graph. The Open Graph protocol\nbuilds on these existing technologies and gives developers one thing to\nimplement. Developer simplicity is a key goal of the Open Graph protocol which\nhas informed many of <a href="https://www.scribd.com/doc/30715288/The-Open-Graph-Protocol-Design-Decisions">the technical design decisions</a>.\n</p>\n<hr />\n<h2 id="aidmetadatahrefmetadatabasicmetadataa"><a id="metadata" href="#metadata">Basic Metadata</a></h2>\n<p>To turn your web pages into graph objects, you need to add basic metadata to\nyour page. We\'ve based the initial version of the protocol on\n<a href="https://en.wikipedia.org/wiki/RDFa">RDFa</a> which means that you\'ll place\nadditional <code>&lt;meta&gt;</code> tags in the <code>&lt;head&gt;</code> of your web page. The four required\nproperties for every page are:</p>\n<ul>\n<li><code>og:title</code> - The title of your object as it should appear within the graph,\ne.g., "The Rock".</li>\n<li><code>og:type</code> - The <a href="#types">type</a> of your object, e.g., "video.movie".  Depending on\nthe type you specify, other properties may also be required.</li>\n<li><code>og:image</code> - An image URL which should represent your object within the\ngraph.</li>\n<li><code>og:url</code> - The canonical URL of your object that will be used as its\npermanent ID in the graph, e.g., "https://www.imdb.com/title/tt0117500/".</li>\n</ul>\n<p>As an example, the following is the Open Graph protocol markup for <a href="https://www.imdb.com/title/tt0117500/">The Rock on\nIMDB</a>:</p>\n<pre><code>&lt;html prefix="og: https://ogp.me/ns#"&gt;\n&lt;head&gt;\n&lt;title&gt;The Rock (1996)&lt;/title&gt;\n&lt;meta property="og:title" content="The Rock" /&gt;\n&lt;meta property="og:type" content="video.movie" /&gt;\n&lt;meta property="og:url" content="https://www.imdb.com/title/tt0117500/" /&gt;\n&lt;meta property="og:image" content="https://ia.media-imdb.com/images/rock.jpg" /&gt;\n...\n&lt;/head&gt;\n...\n&lt;/html&gt;\n</code></pre>\n<h3 id="aidoptionalhrefoptionaloptionalmetadataa"><a id="optional" href="#optional">Optional Metadata</a></h3>\n<p>The following properties are optional for any object and are generally\nrecommended:</p>\n<ul>\n<li><code>og:audio</code> - A URL to an audio file to accompany this object.</li>\n<li><code>og:description</code> - A one to two sentence description of your object.</li>\n<li><code>og:determiner</code> - The word that appears before this object\'s title\nin a sentence. An <a href="#enum">enum</a> of (a, an, the, "", auto). If <code>auto</code> is \nchosen, the consumer of your data should chose between "a" or "an".\nDefault is "" (blank).</li>\n<li><code>og:locale</code> - The locale these tags are marked up in.\nOf the format <code>language_TERRITORY</code>. Default is <code>en_US</code>.</li>\n<li><code>og:locale:alternate</code> - An <a href="#array">array</a> of other locales this page is \navailable in.</li>\n<li><code>og:site_name</code> - If your object is part of a larger web site, the name which\nshould be displayed for the overall site. e.g., "IMDb".</li>\n<li><code>og:video</code> - A URL to a video file that complements this object.</li>\n</ul>\n<p>For example (line-break solely for display purposes):</p>\n<pre><code>&lt;meta property="og:audio" content="https://example.com/bond/theme.mp3" /&gt;\n&lt;meta property="og:description" \n  content="Sean Connery found fame and fortune as the\n           suave, sophisticated British agent, James Bond." /&gt;\n&lt;meta property="og:determiner" content="the" /&gt;\n&lt;meta property="og:locale" content="en_GB" /&gt;\n&lt;meta property="og:locale:alternate" content="fr_FR" /&gt;\n&lt;meta property="og:locale:alternate" content="es_ES" /&gt;\n&lt;meta property="og:site_name" content="IMDb" /&gt;\n&lt;meta property="og:video" content="https://example.com/bond/trailer.swf" /&gt;\n</code></pre>\n<p>The RDF schema (in <a href="https://en.wikipedia.org/wiki/Turtle_(syntax)">Turtle</a>) \ncan be found at <a href="https://ogp.me/ns/ogp.me.ttl">ogp.me/ns</a>.</p>\n<hr />\n<h2 id="aidstructuredhrefstructuredstructuredpropertiesa"><a id="structured" href="#structured">Structured Properties</a></h2>\n<p>Some properties can have extra metadata attached to them.\nThese are specified in the same way as other metadata with <code>property</code> and\n<code>content</code>, but the <code>property</code> will have extra <code>:</code>.</p>\n<p>The <code>og:image</code> property has some optional structured properties:</p>\n<ul>\n<li><code>og:image:url</code> - Identical to <code>og:image</code>.</li>\n<li><code>og:image:secure_url</code> - An alternate url to use if the webpage requires\nHTTPS.</li>\n<li><code>og:image:type</code> - A <a href="https://en.wikipedia.org/wiki/Internet_media_type">MIME type</a> for this image.</li>\n<li><code>og:image:width</code> - The number of pixels wide.</li>\n<li><code>og:image:height</code> - The number of pixels high.</li>\n<li><code>og:image:alt</code> - A description of what is in the image (not a caption). If the page specifies an og:image it should specify <code>og:image:alt</code>.</li>\n</ul>\n<p>A full image example:</p>\n<pre><code>&lt;meta property="og:image" content="https://example.com/ogp.jpg" /&gt;\n&lt;meta property="og:image:secure_url" content="https://secure.example.com/ogp.jpg" /&gt;\n&lt;meta property="og:image:type" content="image/jpeg" /&gt;\n&lt;meta property="og:image:width" content="400" /&gt;\n&lt;meta property="og:image:height" content="300" /&gt;\n&lt;meta property="og:image:alt" content="A shiny red apple with a bite taken out" /&gt;\n</code></pre>\n<p>The <code>og:video</code> tag has the identical tags as <code>og:image</code>. Here is an example:</p>\n<pre><code>&lt;meta property="og:video" content="https://example.com/movie.swf" /&gt;\n&lt;meta property="og:video:secure_url" content="https://secure.example.com/movie.swf" /&gt;\n&lt;meta property="og:video:type" content="application/x-shockwave-flash" /&gt;\n&lt;meta property="og:video:width" content="400" /&gt;\n&lt;meta property="og:video:height" content="300" /&gt;\n</code></pre>\n<p>The <code>og:audio</code> tag only has the first 3 properties available\n(since size doesn\'t make sense for sound):</p>\n<pre><code>&lt;meta property="og:audio" content="https://example.com/sound.mp3" /&gt;\n&lt;meta property="og:audio:secure_url" content="https://secure.example.com/sound.mp3" /&gt;\n&lt;meta property="og:audio:type" content="audio/mpeg" /&gt;\n</code></pre>\n<hr />\n<h2 id="aidarrayhrefarrayarraysa"><a id="array" href="#array">Arrays</a></h2>\n<p>If a tag can have multiple values, just put multiple versions of the same\n<code>&lt;meta&gt;</code> tag on your page. The first tag (from top to bottom) is given\npreference during conflicts.</p>\n<pre><code>&lt;meta property="og:image" content="https://example.com/rock.jpg" /&gt;\n&lt;meta property="og:image" content="https://example.com/rock2.jpg" /&gt;\n</code></pre>\n<p>Put structured properties after you declare their root tag. Whenever\nanother root element is parsed, that structured property\nis considered to be done and another one is started.</p>\n<p>For example:</p>\n<pre><code>&lt;meta property="og:image" content="https://example.com/rock.jpg" /&gt;\n&lt;meta property="og:image:width" content="300" /&gt;\n&lt;meta property="og:image:height" content="300" /&gt;\n&lt;meta property="og:image" content="https://example.com/rock2.jpg" /&gt;\n&lt;meta property="og:image" content="https://example.com/rock3.jpg" /&gt;\n&lt;meta property="og:image:height" content="1000" /&gt;\n</code></pre>\n<p>means there are 3 images on this page, the first image is <code>300x300</code>, the middle\none has unspecified dimensions, and the last one is <code>1000</code>px tall.</p>\n<hr />\n<h2 id="aidtypeshreftypesobjecttypesa"><a id="types" href="#types">Object Types</a></h2>\n<p>In order for your object to be represented within the graph, you need to\nspecify its type. This is done using the <code>og:type</code> property:</p>\n<pre><code>&lt;meta property="og:type" content="website" /&gt;\n</code></pre>\n<p>When the community agrees on the schema for a type, it is added to the list\nof global types. All other objects in the type system are\n<a href="https://en.wikipedia.org/wiki/CURIE">CURIEs</a> of the form</p>\n<pre><code>&lt;head prefix="my_namespace: https://example.com/ns#"&gt;\n&lt;meta property="og:type" content="my_namespace:my_type" /&gt;\n</code></pre>\n<p>The global types are grouped into verticals. Each vertical has its\nown namespace. The <code>og:type</code> values for a namespace are always prefixed with\nthe namespace and then a period.\nThis is to reduce confusion with user-defined namespaced types which always\nhave colons in them.</p>\n<h3 id="aidtype_musichreftype_musicmusica"><a id="type_music" href="#type_music">Music</a></h3>\n<ul>\n<li>Namespace URI: <a href="https://ogp.me/ns/music"><code>https://ogp.me/ns/music#</code></a></li>\n</ul>\n<p><code>og:type</code> values:</p>\n<p><a name="type_music.song" href="#type_music.song"><code>music.song</code></a></p>\n<ul>\n<li><code>music:duration</code> - <a href="#integer">integer</a> &gt;=1 - The song\'s length in seconds.</li>\n<li><code>music:album</code> - <a href="#type_music.album">music.album</a> <a href="#array">array</a> -\nThe album this song is from.</li>\n<li><code>music:album:disc</code> - <a href="#integer">integer</a> &gt;=1 -\nWhich disc of the album this song is on.</li>\n<li><code>music:album:track</code> - <a href="#integer">integer</a> &gt;=1 -\nWhich track this song is.</li>\n<li><code>music:musician</code> - <a href="#type_profile">profile</a> <a href="#array">array</a> -\nThe musician that made this song.</li>\n</ul>\n<p><a name="type_music.album" href="#type_music.album"><code>music.album</code></a></p>\n<ul>\n<li><code>music:song</code> - <a href="#type_music.song">music.song</a> - The song on this album.</li>\n<li><code>music:song:disc</code> - <a href="#integer">integer</a> &gt;=1 -\nThe same as <code>music:album:disc</code> but in reverse.</li>\n<li><code>music:song:track</code> - <a href="#integer">integer</a> &gt;=1 -\nThe same as <code>music:album:track</code> but in reverse.</li>\n<li><code>music:musician</code> - <a href="#type_profile">profile</a> -\nThe musician that made this song.</li>\n<li><code>music:release_date</code> - <a href="#datetime">datetime</a> - \nThe date the album was released.</li>\n</ul>\n<p><a name="type_music.playlist" href="#type_music.playlist"><code>music.playlist</code></a></p>\n<ul>\n<li><code>music:song</code> - Identical to the ones on <a href="#type_music.album">music.album</a></li>\n<li><code>music:song:disc</code></li>\n<li><code>music:song:track</code></li>\n<li><code>music:creator</code> - <a href="#type_profile">profile</a> - The creator of this playlist.</li>\n</ul>\n<p><a name="type_music.radio_station" href="#type_music.radio_station"><code>music.radio_station</code></a></p>\n<ul>\n<li><code>music:creator</code> - <a href="#type_profile">profile</a> - The creator of this station.</li>\n</ul>\n<h3 id="aidtype_videohreftype_videovideoa"><a id="type_video" href="#type_video">Video</a></h3>\n<ul>\n<li>Namespace URI: <a href="https://ogp.me/ns/video"><code>https://ogp.me/ns/video#</code></a></li>\n</ul>\n<p><code>og:type</code> values:</p>\n<p><a name="type_video.movie" href="#type_video.movie"><code>video.movie</code></a></p>\n<ul>\n<li><code>video:actor</code> - <a href="#type_profile">profile</a> <a href="#array">array</a> -\nActors in the movie.</li>\n<li><code>video:actor:role</code> - <a href="#string">string</a> - The role they played.</li>\n<li><code>video:director</code> - <a href="#type_profile">profile</a> <a href="#array">array</a> -\nDirectors of the movie.</li>\n<li><code>video:writer</code> - <a href="#type_profile">profile</a> <a href="#array">array</a> -\nWriters of the movie.</li>\n<li><code>video:duration</code> - <a href="#integer">integer</a> &gt;=1 - \nThe movie\'s length in seconds.</li>\n<li><code>video:release_date</code> - <a href="#datetime">datetime</a> - \nThe date the movie was released.</li>\n<li><code>video:tag</code> - <a href="#string">string</a> <a href="#array">array</a> -\nTag words associated with this movie.</li>\n</ul>\n<p><a name="type_video.episode" href="#type_video.episode"><code>video.episode</code></a></p>\n<ul>\n<li><code>video:actor</code> - Identical to <a href="#type_video.movie">video.movie</a></li>\n<li><code>video:actor:role</code></li>\n<li><code>video:director</code></li>\n<li><code>video:writer</code></li>\n<li><code>video:duration</code></li>\n<li><code>video:release_date</code></li>\n<li><code>video:tag</code></li>\n<li><code>video:series</code> - <a href="#type_video.tv_show">video.tv_show</a> -\nWhich series this episode belongs to.</li>\n</ul>\n<p><a name="type_video.tv_show" href="#type_video.tv_show"><code>video.tv_show</code></a></p>\n<p>A multi-episode TV show.\nThe metadata is identical to <a href="#type_video.movie">video.movie</a>.</p>\n<p><a name="type_video.other" href="#type_video.other"><code>video.other</code></a></p>\n<p>A video that doesn\'t belong in any other category.\nThe metadata is identical to <a href="#type_video.movie">video.movie</a>.</p>\n<h3 id="aidno_verticalhrefno_verticalnoverticala"><a id="no_vertical" href="#no_vertical">No Vertical</a></h3>\n<p>These are globally defined objects that just don\'t fit into a vertical but\nyet are broadly used and agreed upon.</p>\n<p><code>og:type</code> values:</p>\n<p><a name="type_article" href="#type_article"><code>article</code></a> - Namespace URI: <a href="https://ogp.me/ns/article"><code>https://ogp.me/ns/article#</code></a></p>\n<ul>\n<li><code>article:published_time</code> - <a href="#datetime">datetime</a> - \nWhen the article was first published.</li>\n<li><code>article:modified_time</code> - <a href="#datetime">datetime</a> - \nWhen the article was last changed.</li>\n<li><code>article:expiration_time</code> - <a href="#datetime">datetime</a> - \nWhen the article is out of date after.</li>\n<li><code>article:author</code> - <a href="#type_profile">profile</a> <a href="#array">array</a> -\nWriters of the article.</li>\n<li><code>article:section</code> - <a href="#string">string</a> - A high-level section name. E.g. Technology</li>\n<li><code>article:tag</code> - <a href="#string">string</a> <a href="#array">array</a> -\nTag words associated with this article.</li>\n</ul>\n<p><a name="type_book" href="#type_book"><code>book</code></a> - Namespace URI: <a href="https://ogp.me/ns/book"><code>https://ogp.me/ns/book#</code></a></p>\n<ul>\n<li><code>book:author</code> - <a href="#type_profile">profile</a> <a href="#array">array</a> - Who wrote this book.</li>\n<li><code>book:isbn</code> - <a href="#string">string</a> -\nThe <a href="https://en.wikipedia.org/wiki/International_Standard_Book_Number">ISBN</a></li>\n<li><code>book:release_date</code> - <a href="#datetime">datetime</a> - The date the book was released.</li>\n<li><code>book:tag</code> - <a href="#string">string</a> <a href="#array">array</a> -\nTag words associated with this book.</li>\n</ul>\n<p><a name="type_profile" href="#type_profile"><code>profile</code></a> - Namespace URI: <a href="https://ogp.me/ns/profile"><code>https://ogp.me/ns/profile#</code></a></p>\n<ul>\n<li><code>profile:first_name</code> - <a href="#string">string</a> - A name normally given to an individual by a parent or self-chosen.</li>\n<li><code>profile:last_name</code> - <a href="#string">string</a> - A name inherited from a family or marriage and by which the individual is commonly known.</li>\n<li><code>profile:username</code> - <a href="#string">string</a> - A short unique string to identify them.</li>\n<li><code>profile:gender</code> - <a href="#enum">enum</a>(male, female) - Their gender.</li>\n</ul>\n<p><a name="type_website" href="#type_website"><code>website</code></a> - Namespace URI: <a href="https://ogp.me/ns/website"><code>https://ogp.me/ns/website#</code></a></p>\n<p>No additional properties other than the basic ones.\nAny non-marked up webpage should be treated as <code>og:type</code> website.</p>\n<hr />\n<h2 id="aiddata_typeshrefdata_typestypesa"><a id="data_types" href="#data_types">Types</a></h2>\n<p>The following types are used when defining attributes in Open Graph protocol.</p>\n<table>\n<tr>\n  <th width=150><b>Type</b></th>\n  <th width=300><b>Description</b></th>\n  <th width=200><b>Literals</b></th>\n</tr>\n\n<tr>\n  <td><a name="bool" href="#bool">Boolean</td>\n  <td>A Boolean represents a true or false value</td>\n  <td>true, false, 1, 0</td>\n</tr>\n\n<tr>\n  <td><a name="datetime" href="#datetime">DateTime</td>\n  <td>A DateTime represents a temporal value composed of a date\n    (year, month, day) and an optional time component (hours, minutes)</td>\n  <td><a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a></td>\n</tr>\n\n<tr>\n  <td><a name="enum" href="#enum">Enum</td>\n  <td>A type consisting of bounded set of constant string values \n  (enumeration members).\n  <td>A string value that is a member of the enumeration</td>\n</tr>\n\n<tr>\n  <td><a name="float" href="#float">Float</td>\n  <td>A 64-bit signed floating point number</td>\n  <td>All literals that conform to the following formats:<br><br>\n1.234<br>\n-1.234<br>\n1.2e3<br>\n-1.2e3<br>\n7E-10<br>\n</td>\n</tr>\n\n<tr>\n  <td><a name="integer" href="#integer">Integer</td>\n  <td>A 32-bit signed integer. In many languages integers over 32-bits become \n    floats, so we limit Open Graph protocol for easy multi-language use.</td>\n  <td>All literals that conform to the following formats:<br><br>\n1234<br>\n-123<br>\n</td>\n</tr>\n\n<tr>\n  <td><a name="string" href="#string">String</td>\n  <td>A sequence of Unicode characters</td>\n  <td>All literals composed of Unicode characters with no escape characters</td>\n</tr>\n\n<tr>\n  <td><a name="url" href="#url">URL</td>\n  <td>A sequence of Unicode characters that identify an Internet resource.\n  <td>All valid URLs that utilize the https:// or https:// protocols</td>\n</tr>\n\n</table>\n<hr />\n<h2 id="aiddiscusshrefdiscussdiscussionandsupporta"><a id=\'discuss\' href="#discuss">Discussion and support</a></h2>\n<p>You can discuss the Open Graph Protocol in\n<a href="https://www.facebook.com/groups/opengraph/">the Facebook group</a> or on \n<a href="https://groups.google.com/group/open-graph-protocol">the developer mailing list</a>.\nIt is currently being consumed by Facebook (<a href="https://developers.facebook.com/docs/opengraph/">see their documentation</a>), \nGoogle (<a href="https://developers.google.com/+/web/+1button/#plus-snippet">see their documentation</a>), and\n<a href="https://developer.mixi.co.jp/en/connect/mixi_plugin/mixi_check/spec_mixi_check/">mixi</a>.\nIt is being published by IMDb, Microsoft, NHL, Posterous, Rotten Tomatoes,\nTIME, Yelp, and many many others.</p>\n<hr />\n<h2 id="aidimplementationshrefimplementationsimplementationsa"><a id=\'implementations\' href="#implementations">Implementations</a></h2>\n<p>The open source community has developed a number of parsers and publishing\ntools. Let the Facebook group know if you\'ve built something awesome too!</p>\n<ul>\n<li><a href="https://developers.facebook.com/tools/debug/">Facebook Object Debugger</a> -\nFacebook\'s official parser and debugger</li>\n<li><a href="https://www.google.com/webmasters/tools/richsnippets">Google Rich Snippets Testing Tool</a> - Open Graph protocol support in specific verticals and Search Engines.</li>\n<li><a href="https://github.com/niallkennedy/open-graph-protocol-tools">PHP Validator and Markup Generator</a> -  OGP 2011 input validator and markup generator in PHP5 objects</li>\n<li><a href="https://github.com/scottmac/opengraph">PHP Consumer</a> -\na small library for accessing of Open Graph Protocol data in PHP</li>\n<li><a href="https://buzzword.org.uk/2010/opengraph/#php">OpenGraphNode in PHP</a> -\na simple parser for PHP</li>\n<li><a href="https://pypi.python.org/pypi/PyOpenGraph">PyOpenGraph</a> -\na library written in Python for parsing Open Graph protocol\ninformation from web sites</li>\n<li><a href="https://github.com/intridea/opengraph">OpenGraph Ruby</a> -\nRuby Gem which parses web pages and extracts Open Graph protocol markup</li>\n<li><a href="https://github.com/callumj/opengraph-java">OpenGraph for Java</a> -\nsmall Java class used to represent the Open Graph protocol</li>\n<li><a href="https://search.cpan.org/~tobyink/RDF-RDFa-Parser/lib/RDF/RDFa/Parser.pm">RDF::RDFa::Parser</a> -\nPerl RDFa parser which understands the Open Graph protocol</li>\n<li><a href="https://wordpress.org/plugins/facebook/">WordPress plugin</a> -\nFacebook\'s official WordPress plugin, which adds Open Graph metadata to WordPress powered sites. </li>\n<li><a href="https://wordpress.org/plugins/wp-facebook-open-graph-protocol/">Alternate WordPress OGP plugin</a> -\nA simple lightweight WordPress plugin which adds Open Graph metadata to WordPress powered sites. </li>\n</ul>\n    </div>\n    <div id="footer">\n      <p>The Open Graph protocol was originally created at Facebook and is inspired by <a href="https://en.wikipedia.org/wiki/Dublin_Core">Dublin Core</a>, <a href="https://googlewebmastercentral.blogspot.com/2009/02/specify-your-canonical.html">link-rel canonical</a>, <a href="https://microformats.org/">Microformats</a>, and <a href="https://en.wikipedia.org/wiki/RDFa">RDFa</a>. The specification described on this page is available under the <a href="https://openwebfoundation.org/legal/the-0-9-agreements---necessary-claims">Open Web Foundation Agreement, Version 0.9</a>. This website is <a href="https://github.com/facebook/open-graph-protocol">Open Source</a>. </p>\n    </div>\n    </div>\n</script>\n  </body>\n</html>\n'